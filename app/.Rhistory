facet_wrap(~ year) +
labs(x = "Violent crime count", y = "Count") +
theme_classic(base_size = 15)
# excluding Cook county data from the histogram
ggplot(filter(ispcrime_tbl2, county != "Cook"), aes(x = violentCrime)) +
geom_histogram(binwidth = 100, fill = as.factor(year)) +
facet_wrap(~ year) +
labs(x = "Violent crime count", y = "Count") +
theme_classic(base_size = 15)
# excluding Cook county data from the histogram
ggplot(filter(ispcrime_tbl2, county != "Cook"), aes(x = violentCrime)) +
geom_histogram(binwidth = 100, fill=year) +
facet_wrap(~ year) +
labs(x = "Violent crime count", y = "Count") +
theme_classic(base_size = 15)
# excluding Cook county data from the histogram
ggplot(filter(ispcrime_tbl2, county != "Cook"), aes(x = violentCrime)) +
geom_histogram(binwidth = 100, fill = year) +
facet_wrap(~ year) +
labs(x = "Violent crime count", y = "Count") +
theme_classic(base_size = 15)
# excluding Cook county data from the histogram
ggplot(filter(ispcrime_tbl2, county != "Cook"), aes(x = violentCrime, fill = year)) +
geom_histogram(binwidth = 100) +
facet_wrap(~ year) +
labs(x = "Violent crime count", y = "Count") +
theme_classic(base_size = 15)
library(ggplot2)
library(RColorBrewer)
library(tmap)
library(GGally)
ispcrime$county <- recode(
ispcrime$county,
"De Kalb" = "DeKalb",
"De Witt" = "DeWitt",
"Du Page" = "DuPage",
"La Salle" = "LaSalle",
.default = levels(ispcrime$county)
)
ispcrime_tbl2 <- left_join(ispcrime_tbl, regions) %>% na.omit() %>% mutate(year = as.factor(year))
ispcrime_tbl2_2015 <- filter(ispcrime_tbl2, year == 2015, county != "Cook")
counties@data <- counties@data %>%
left_join(
ispcrime %>%
filter(year == 2015) %>%
select(name = county, violentCrime)
)
# excluding Cook county data from the histogram
ggplot(filter(ispcrime_tbl2, county != "Cook"), aes(x = violentCrime, fill = year)) +
geom_histogram(binwidth = 100) +
facet_wrap(~ year) +
labs(x = "Violent crime count", y = "Count") +
theme_classic(base_size = 15)
# excluding Cook county data from the histogram
ggplot(filter(ispcrime_tbl2, county != "Cook"), aes(x = violentCrime, fill = year)) +
geom_histogram(binwidth = 100) +
facet_wrap(~ year) +
labs(x = "Violent crime count", y = "Count") +
theme_minimal(base_size = 15)
# histogram of violent crime count by county
ggplot(ispcrime_tbl2, aes(x = violentCrime)) +
geom_histogram(binwidth = 100) +
facet_wrap(~ year) +
labs(x = "Violent crime count", y = "Count") +
theme_minimal(base_size = 15)
# excluding Cook county data from the histogram
ggplot(filter(ispcrime_tbl2, county != "Cook"), aes(x = violentCrime, fill = year)) +
geom_histogram(binwidth = 100) +
facet_wrap(~ year) +
labs(x = "Violent crime count", y = "Count") +
theme_minimal(base_size = 15)
# bar plot of violent crime mean count by region
barplot <- ggplot(ispcrime_tbl2, aes(x = region, y = violentCrime, fill = region)) +
stat_summary(geom = "bar", fun.y = "mean")
barplot
# add labels to the plot and change the appearance
barplot2 <- barplot +
labs(title = "Violent crime count by region", x = "", y = "Count") +
theme_classic(base_size = 15)
barplot2
# rescale the y axis and remove the legends
barplot2 +
scale_y_log10() +
theme(legend.position = "None") +
scale_fill_brewer(palette="Spectral")
# rescale the y axis and remove the legends
barplot2 +
labs(subtitle = "In log 10 scale") +
scale_y_log10() +
theme(legend.position = "None") +
scale_fill_brewer(palette="Spectral")
log10(0)
# rescale the y axis and remove the legends
barplot2 +
labs(subtitle = "In log 10 scale") +
scale_y_log10() +
theme(legend.position = "None") +
scale_fill_brewer(palette="Spectral")
# add labels to the plot and change the appearance
barplot2 <- barplot +
labs(title = "Violent crime count by region", x = "", y = "Count") +
theme_classic(base_size = 15)
barplot2
# rescale the y axis and remove the legends
barplot2 +
labs(subtitle = "In log 10 scale") +
scale_y_log10() +
theme(legend.position = "None") +
scale_fill_brewer(palette="Spectral")
# rescale the y axis and remove the legends
barplot2 +
labs(subtitle = "In log 10 scale", y = expression(Log_10, "(Count)")) +
scale_y_log10() +
theme(legend.position = "None") +
scale_fill_brewer(palette="Spectral")
# rescale the y axis and remove the legends
barplot2 +
labs(subtitle = "In log 10 scale", y = expression(log_{10}, "(Count)")) +
scale_y_log10() +
theme(legend.position = "None") +
scale_fill_brewer(palette="Spectral")
# rescale the y axis and remove the legends
barplot2 +
labs(subtitle = "In log 10 scale", y = expression(log_{10}, "(Count)")) +
scale_y_log10() +
theme(legend.position = "None") +
scale_fill_brewer(palette="Spectral")
# rescale the y axis and remove the legends
barplot2 +
labs(subtitle = "In log 10 scale", y = expression(paste(log_{10}, "(Count)"))) +
scale_y_log10() +
theme(legend.position = "None") +
scale_fill_brewer(palette="Spectral")
# rescale the y axis and remove the legends
barplot2 +
labs(subtitle = "In log 10 scale", y = expression(paste(log_{10}, "(Count)"))) +
scale_y_log10() +
theme(legend.position = "None") +
scale_fill_brewer(palette="Spectral")
# rescale the y axis and remove the legends
barplot2 +
labs(subtitle = "In log 10 scale", y = expression(paste(log^{10}, "(Count)"))) +
scale_y_log10() +
theme(legend.position = "None") +
scale_fill_brewer(palette="Spectral")
# rescale the y axis and remove the legends
barplot2 +
labs(subtitle = "In log 10 scale", y = expression(paste(log[10], "(Count)"))) +
scale_y_log10() +
theme(legend.position = "None") +
scale_fill_brewer(palette="Spectral")
# rescale the y axis and remove the legends
barplot2 +
ylab(expression(paste(log[10], "(Count)"))) +
scale_y_log10() +
theme(legend.position = "None") +
scale_fill_brewer(palette="Spectral")
barplot <- ggplot(ispcrime_tbl2, aes(x = region, y = violentCrime, fill = region)) + stat_summary(geom = "bar", fun.y = "sum")
barplot
# add labels to the plot and change the appearance
barplot2 <- barplot +
labs(title = "Violent crime count by region", x = "", y = "Count") +
theme_classic(base_size = 15)
barplot2
# rescale the y axis, remove the legends, and change colors
barplot2 +
ylab(expression(paste(log[10], "(Count)"))) +
scale_y_log10() +
theme(legend.position = "None") +
scale_fill_brewer(palette="Spectral")
# rescale the y axis, remove the legends, and change colors
barplot2 +
ylab(expression(paste(log[10], "(Count)"))) +
scale_y_log10() +
theme(legend.position = "None") +
scale_fill_brewer(palette="Spectral")
# rescale the y axis, remove the legends, and change colors
barplot2 +
ylab(expression(paste(log[10], "(Count)"))) +
theme(legend.position = "None") +
scale_fill_brewer(palette="Spectral")
# rescale the y axis, remove the legends, and change colors
barplot2 +
ylab(expression(paste(log[10], "(Count)"))) +
scale_y_log10() +
theme(legend.position = "None") +
scale_fill_brewer(palette="Spectral")
# rescale the y axis, remove the legends, and change colors
barplot2 +
ylab(expression(paste(log[10], "(Count)"))) +
theme(legend.position = "None") +
scale_fill_brewer(palette="Spectral")
# bar plot of crime count by region
barplot <- ggplot(ispcrime_tbl2_2015, aes(x = region, y = violentCrime, fill = region)) + stat_summary(geom = "bar", fun.y = "mean", mapping = aes(group = region))
barplot
# bar plot of crime count by region
barplot <- ggplot(ispcrime_tbl2, aes(x = region, y = violentCrime, fill = region)) + stat_summary(geom = "bar", fun.y = "mean", mapping = aes(group = region))
barplot
# bar plot of crime count by region
barplot <- ggplot(ispcrime_tbl2, aes(x = region, y = violentCrime, fill = region)) + stat_summary(geom = "bar", fun.y = "mean")
barplot
# bar plot of crime count by region
barplot <- ggplot(ispcrime_tbl2, aes(x = region, y = violentCrime, fill = region)) + stat_summary(geom = "bar", fun.y = "mean", mapping = aes(group = region))
barplot
# bar plot of crime count by region
barplot <- ggplot(ispcrime_tbl2, aes(x = region, y = violentCrime, fill = region)) + stat_summary(geom = "bar", fun.y = "mean", aes(group = region))
barplot
# bar plot of crime count by region
barplot <- ggplot(ispcrime_tbl2, aes(x = region, y = violentCrime, fill = region)) + stat_summary(geom = "bar", fun.y = "mean", aes(group = region))
barplot
# bar plot of crime count by region
barplot <- ggplot(ispcrime_tbl2, aes(x = region, y = violentCrime, fill = region, group = region)) + stat_summary(geom = "bar", fun.y = "mean")
barplot
# bar plot of crime count by region
barplot <- ggplot(filter(ispcrime_tbl2, year == 2015), aes(x = region, y = violentCrime, fill = region, group = region)) +
stat_summary(geom = "bar", fun.y = "sum")
barplot
# parallel plot for all crime types in 2015
ggparcoord (filter(ispcrime_tbl2, county != "Cook"), columns = c(4:7, 9:12), groupColumn = "region", alphaLines=0.8) +
labs(title="Crime count in 2015", x = "", y = "", color = "Region") +
theme_minimal(base_size=  15) +
theme(axis.text.y = element_blank())
# parallel plot for all crime types
ggparcoord (filter(ispcrime_tbl2, county != "Cook"), columns = c(4:7, 9:12), groupColumn = "region", alphaLines=0.8) +
labs(title="Crime count in 2015", x = "", y = "", color = "Region") +
theme_minimal(base_size=  15) +
theme(axis.text.y = element_blank())
# merging regions data and count the number of counties by region
ispcrime_tbl %>%
select(county) %>%
unique() %>%
left_join(regions) %>%
group_by(region) %>%
count()
?unique()
# merging regions data and count the number of counties by region
ispcrime_tbl %>%
left_join(regions) %>%
group_by(region) %>%
summarise(count = unique(county))
colnames(ispcrime)
# get a quick summary of violent crime and property crime
ispcrime_tbl %>%
select(robbery, burglary) %>%
summary()
lm_fit <- lm(robbery ~ burglary, ispcrime)
summary(lm_fit)
library(modelr)
library(broom)
# put model fit results in a data frame format
tidy(lm_fit)
# get predictions and residuals for each data point
ispcrime %>%
select(year, county, propertyCrime, violentCrime) %>%
add_predictions(lm_fit) %>%
add_residuals(lm_fit) %>%
head()
# get predictions and residuals for each data point
ispcrime %>%
select(year, county, burglary, robbery) %>%
add_predictions(lm_fit) %>%
add_residuals(lm_fit) %>%
head()
# plot the model fit
plot(robbery ~ burglary, ispcrime)
abline(lm_fit)
# show diagnostic plots
par(mfrow=c(2, 2))
plot(lm_fit)
summary(ispcrime)
plot(murder ~ rape + robbery, ispcrime)
a <- lm(murder ~ rape + robbery + aggAssault, ispcrime)
plot(a)
plot(murder ~ rape + robbery + aggAssault, ispcrime)
abline(a)
par(mfrow=c(1, 1))
plot(murder ~ rape + robbery + aggAssault, ispcrime)
abline(a)
library(knitr)
opts_chunk$set(echo = TRUE)
library(icjiar)
library(dplyr)
ispcrime_tbl <- tibble::as.tibble(ispcrime)
regions_tbl <- tibble::as.tibble(regions)
library(ggplot2)
ispcrime_tbl2 <- left_join(ispcrime_tbl, regions) %>% na.omit() %>% mutate(Year = as.factor(year))
# histogram of violent crime count by county
ggplot(ispcrime_tbl2, aes(x = violentCrime)) +
geom_histogram(binwidth = 200) +
facet_wrap(~ Year) +
labs(x = "Violent crime count", y = "Count") +
theme_minimal()
# histogram of violent crime count by county
ggplot(ispcrime_tbl2, aes(x = propertyCrime)) +
geom_histogram(binwidth = 200) +
facet_wrap(~ Year) +
labs(x = "Violent crime count", y = "Count") +
theme_minimal()
# exclude Cook county data from the histogram and add colors
ggplot(filter(ispcrime_tbl2, county != "Cook"), aes(x = propertyCrime, fill = Year)) +
geom_histogram(binwidth = 200) + facet_wrap(~ Year) +
labs(x = "Violent crime count", y = "Count") +
theme_minimal()
# histogram of violent crime count by county
ggplot(ispcrime_tbl2, aes(x = murder)) +
geom_histogram(binwidth = 200) +
facet_wrap(~ Year) +
labs(x = "Violent crime count", y = "Count") +
theme_minimal()
# histogram of violent crime count by county
ggplot(ispcrime_tbl2, aes(x = murder)) +
geom_histogram(binwidth = 50) +
facet_wrap(~ Year) +
labs(x = "Violent crime count", y = "Count") +
theme_minimal()
# histogram of violent crime count by county
ggplot(ispcrime_tbl2, aes(x = murder)) +
geom_histogram(binwidth = 30) +
facet_wrap(~ Year) +
labs(x = "Violent crime count", y = "Count") +
theme_minimal()
# histogram of violent crime count by county
ggplot(ispcrime_tbl2, aes(x = murder)) +
geom_histogram() +
facet_wrap(~ Year) +
labs(x = "Violent crime count", y = "Count") +
theme_minimal()
# exclude Cook county data from the histogram and add colors
ggplot(filter(ispcrime_tbl2, county != "Cook"), aes(x = murder, fill = Year)) +
geom_histogram(binwidth = 200) + facet_wrap(~ Year) +
labs(x = "Violent crime count", y = "Count") +
theme_minimal()
# exclude Cook county data from the histogram and add colors
ggplot(filter(ispcrime_tbl2, county != "Cook"), aes(x = murder, fill = Year)) +
geom_histogram() + facet_wrap(~ Year) +
labs(x = "Violent crime count", y = "Count") +
theme_minimal()
ispcrime_tbl %>% colnames()
# histogram of violent crime count by county
ggplot(ispcrime_tbl2, aes(x = aggAssault)) +
geom_histogram() +
facet_wrap(~ Year) +
labs(x = "Violent crime count", y = "Count") +
theme_minimal()
# exclude Cook county data from the histogram and add colors
ggplot(filter(ispcrime_tbl2, county != "Cook"), aes(x = aggAssault, fill = Year)) +
geom_histogram() + facet_wrap(~ Year) +
labs(x = "Violent crime count", y = "Count") +
theme_minimal()
# histogram of violent crime count by county
ggplot(ispcrime_tbl2, aes(x = robbery)) +
geom_histogram() +
facet_wrap(~ Year) +
labs(x = "Violent crime count", y = "Count") +
theme_minimal()
# exclude Cook county data from the histogram and add colors
ggplot(filter(ispcrime_tbl2, county != "Cook"), aes(x = robbery, fill = Year)) +
geom_histogram() + facet_wrap(~ Year) +
labs(x = "Violent crime count", y = "Count") +
theme_minimal()
# histogram of violent crime count by county
ggplot(ispcrime_tbl2, aes(x = burglary)) +
geom_histogram() +
facet_wrap(~ Year) +
labs(x = "Violent crime count", y = "Count") +
theme_minimal()
# exclude Cook county data from the histogram and add colors
ggplot(filter(ispcrime_tbl2, county != "Cook"), aes(x = burglary, fill = Year)) +
geom_histogram() + facet_wrap(~ Year) +
labs(x = "Violent crime count", y = "Count") +
theme_minimal()
# histogram of violent crime count by county
ggplot(ispcrime_tbl2, aes(x = burglary)) +
geom_histogram(bindwidth=200) +
facet_wrap(~ Year) +
labs(x = "Violent crime count", y = "Count") +
theme_minimal()
?geom_histogram
# histogram of violent crime count by county
ggplot(ispcrime_tbl2, aes(x = burglary)) +
geom_histogram(binwidth=200) +
facet_wrap(~ Year) +
labs(x = "Violent crime count", y = "Count") +
theme_minimal()
# exclude Cook county data from the histogram and add colors
ggplot(filter(ispcrime_tbl2, county != "Cook"), aes(x = burglary, fill = Year)) +
geom_histogram(binwidth=200) + facet_wrap(~ Year) +
labs(x = "Violent crime count", y = "Count") +
theme_minimal()
# histogram of burglary count by county
ggplot(ispcrime_tbl2, aes(x = burglary)) +
geom_histogram(binwidth=100) +
facet_wrap(~ Year) +
labs(x = "Violent crime count", y = "Count") +
theme_minimal()
# exclude Cook county data from the histogram and add colors
ggplot(filter(ispcrime_tbl2, county != "Cook"), aes(x = burglary, fill = Year)) +
geom_histogram(binwidth=100) + facet_wrap(~ Year) +
labs(x = "Violent crime count", y = "Count") +
theme_minimal()
# exclude Cook county data from the histogram and add colors
ggplot(filter(ispcrime_tbl2, county != "Cook"), aes(x = burglary, fill = Year)) +
geom_histogram() + facet_wrap(~ Year) +
labs(x = "Violent crime count", y = "Count") +
theme_minimal()
# histogram of burglary count by county
ggplot(ispcrime_tbl2, aes(x = burglary)) +
geom_histogram() +
facet_wrap(~ Year) +
labs(x = "Violent crime count", y = "Count") +
theme_minimal()
?color()
install.packages("digest")
install.packages("tidyr")
setwd("X:/_icjia_github/icjia-dashboard-demo")
a <- read_csv('data.csv')
a <- readr::read_csv('data.csv')
a
mydata <- readr::read_csv('data.csv')
mymap <- readOGR('.', 'ILcounties') %>%
spTransform(CRS("+proj=longlat +ellps=GRS80"))
library(dplyr)
library(rgdal)
shiny::runApp()
save(mydata, mymap, file="appdata.rda")
mymap <- readOGR('.', 'ILcounties') %>%
spTransform(CRS("+proj=longlat +ellps=GRS80"))
save(mydata, mymap, file="appdata.rda")
save(mydata, mymap, file="data.rda")
rm(a, mydata, mymap)
load("data.rda")
runApp()
mydata <- readr::read_csv('data.csv')
mymap <- readOGR('.', 'ILcounties') %>%
spTransform(CRS("+proj=longlat +ellps=GRS80"))
save(mydata, file = "data/mydata.rda")
save(mymap, file = "data/mymap.rda")
runApp()
runApp()
runApp()
runApp()
runApp()
?runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
library(htmltools)
runApp()
runApp()
runApp()
install.packages('shinyjs')
install.packages("shinyjs")
install.packages("shinyjs", repos="https://cloud.r-project-org/")
.libPaths()
shiny::runApp()
as.Date(2001)
as.Date("2001")
as.Date(2001, format="%Y")
as.Date("2001", format="%Y")
as.Date("2001", format="%Y")
a <- as.Date("2001", format="%Y")
a$year
a
str(a)
format(a, "%Y")
format(as.Date("2001"), "%Y")
format(as.Date("2001", format="%Y"), "%Y")
format(as.Date("2001", format="%Y"), "%Y") %>% class()
shiny::sliderInput()
?shiny::sliderInput()
runApp()
?formatC
?prettyNum
prettyNum(1000, big.mark=",")
prettyNum(1000.22, big.mark=",")
prettyNum(1000.22, big.mark=" ")
prettyNum(1000.22, big.mark=" ", digits=1)
prettyNum(1000.22, big.mark=" ", digits=2)
prettyNum(1000.22, big.mark=" ", digits=3)
prettyNum(1000.22, big.mark=" ", digits=1)
prettyNum(1000.22, big.mark=" ")
formatC(1000.22, big.mark=" ")
formatC(1000.22, big.mark=" ", digits=2)
formatC(1000.22, big.mark=" ", digits=3)
prettyNum(1000.22, big.mark=" ")
runApp()
getOption("highcharter.options")
library(highcharter)
getOption("highcharter.options")
hcopts <- getOption("highcharter.options")
hcopts
options
options(highcharter.options)
options(highcharter)
?hc_plotOptions
runApp()
?hchart
getOption("highcharter")
getOption("highcharter.lang")
getOption("highcharter.lang")$thousandSep
getOption("highcharter.lang")$thousandsSep
runApp()
